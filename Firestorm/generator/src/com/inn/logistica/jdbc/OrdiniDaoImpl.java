/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.inn.logistica.jdbc;

import com.inn.logistica.dao.*;
import com.inn.logistica.factory.*;
import java.util.Date;
import com.inn.logistica.dto.*;
import com.inn.logistica.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class OrdiniDaoImpl extends AbstractDAO implements OrdiniDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT ord_id, ord_data, ord_numero, ord_sped_data, ord_spe_numero, ord_stato, anagrafica_ana_id, corrieri_cor_id, ord_consegnato FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( ord_id, ord_data, ord_numero, ord_sped_data, ord_spe_numero, ord_stato, anagrafica_ana_id, corrieri_cor_id, ord_consegnato ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET ord_id = ?, ord_data = ?, ord_numero = ?, ord_sped_data = ?, ord_spe_numero = ?, ord_stato = ?, anagrafica_ana_id = ?, corrieri_cor_id = ?, ord_consegnato = ? WHERE ord_id = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE ord_id = ?";

	/** 
	 * Index of column ord_id
	 */
	protected static final int COLUMN_ORD_ID = 1;

	/** 
	 * Index of column ord_data
	 */
	protected static final int COLUMN_ORD_DATA = 2;

	/** 
	 * Index of column ord_numero
	 */
	protected static final int COLUMN_ORD_NUMERO = 3;

	/** 
	 * Index of column ord_sped_data
	 */
	protected static final int COLUMN_ORD_SPED_DATA = 4;

	/** 
	 * Index of column ord_spe_numero
	 */
	protected static final int COLUMN_ORD_SPE_NUMERO = 5;

	/** 
	 * Index of column ord_stato
	 */
	protected static final int COLUMN_ORD_STATO = 6;

	/** 
	 * Index of column anagrafica_ana_id
	 */
	protected static final int COLUMN_ANAGRAFICA_ANA_ID = 7;

	/** 
	 * Index of column corrieri_cor_id
	 */
	protected static final int COLUMN_CORRIERI_COR_ID = 8;

	/** 
	 * Index of column ord_consegnato
	 */
	protected static final int COLUMN_ORD_CONSEGNATO = 9;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 9;

	/** 
	 * Index of primary-key column ord_id
	 */
	protected static final int PK_COLUMN_ORD_ID = 1;

	/** 
	 * Inserts a new row in the ordini table.
	 */
	public OrdiniPk insert(Ordini dto) throws OrdiniDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( "SELECT nextval('seq_ordini')" );
			rs = stmt.executeQuery();
			if (rs.next()) {
				dto.setOrdId( rs.getLong( 1 ) );
				rs.close();
				stmt.close();
			}
		
			stmt = conn.prepareStatement( SQL_INSERT );
			int index = 1;
			stmt.setLong( index++, dto.getOrdId() );
			stmt.setDate(index++, dto.getOrdData()==null ? null : new java.sql.Date( dto.getOrdData().getTime() ) );
			stmt.setString( index++, dto.getOrdNumero() );
			stmt.setDate(index++, dto.getOrdSpedData()==null ? null : new java.sql.Date( dto.getOrdSpedData().getTime() ) );
			stmt.setString( index++, dto.getOrdSpeNumero() );
			stmt.setString( index++, dto.getOrdStato() );
			stmt.setLong( index++, dto.getAnagraficaAnaId() );
			if (dto.isCorrieriCorIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setLong( index++, dto.getCorrieriCorId() );
			}
		
			stmt.setDate(index++, dto.getOrdConsegnato()==null ? null : new java.sql.Date( dto.getOrdConsegnato().getTime() ) );
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new OrdiniDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the ordini table.
	 */
	public void update(OrdiniPk pk, Ordini dto) throws OrdiniDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setLong( index++, dto.getOrdId() );
			stmt.setDate(index++, dto.getOrdData()==null ? null : new java.sql.Date( dto.getOrdData().getTime() ) );
			stmt.setString( index++, dto.getOrdNumero() );
			stmt.setDate(index++, dto.getOrdSpedData()==null ? null : new java.sql.Date( dto.getOrdSpedData().getTime() ) );
			stmt.setString( index++, dto.getOrdSpeNumero() );
			stmt.setString( index++, dto.getOrdStato() );
			stmt.setLong( index++, dto.getAnagraficaAnaId() );
			if (dto.isCorrieriCorIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setLong( index++, dto.getCorrieriCorId() );
			}
		
			stmt.setDate(index++, dto.getOrdConsegnato()==null ? null : new java.sql.Date( dto.getOrdConsegnato().getTime() ) );
			stmt.setLong( 10, pk.getOrdId() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new OrdiniDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the ordini table.
	 */
	public void delete(OrdiniPk pk) throws OrdiniDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setLong( 1, pk.getOrdId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new OrdiniDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the ordini table that matches the specified primary-key value.
	 */
	public Ordini findByPrimaryKey(OrdiniPk pk) throws OrdiniDaoException
	{
		return findByPrimaryKey( pk.getOrdId() );
	}

	/** 
	 * Returns all rows from the ordini table that match the criteria 'ord_id = :ordId'.
	 */
	public Ordini findByPrimaryKey(long ordId) throws OrdiniDaoException
	{
		Ordini ret[] = findByDynamicSelect( SQL_SELECT + " WHERE ord_id = ?", new Object[] {  new Long(ordId) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the ordini table that match the criteria ''.
	 */
	public Ordini[] findAll() throws OrdiniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY ord_id", null );
	}

	/** 
	 * Returns all rows from the ordini table that match the criteria 'anagrafica_ana_id = :anagraficaAnaId'.
	 */
	public Ordini[] findByAnagrafica(long anagraficaAnaId) throws OrdiniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE anagrafica_ana_id = ?", new Object[] {  new Long(anagraficaAnaId) } );
	}

	/** 
	 * Returns all rows from the ordini table that match the criteria 'corrieri_cor_id = :corrieriCorId'.
	 */
	public Ordini[] findByCorrieri(long corrieriCorId) throws OrdiniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE corrieri_cor_id = ?", new Object[] {  new Long(corrieriCorId) } );
	}

	/** 
	 * Returns all rows from the ordini table that match the criteria 'ord_id = :ordId'.
	 */
	public Ordini[] findWhereOrdIdEquals(long ordId) throws OrdiniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ord_id = ? ORDER BY ord_id", new Object[] {  new Long(ordId) } );
	}

	/** 
	 * Returns all rows from the ordini table that match the criteria 'ord_data = :ordData'.
	 */
	public Ordini[] findWhereOrdDataEquals(Date ordData) throws OrdiniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ord_data = ? ORDER BY ord_data", new Object[] { ordData==null ? null : new java.sql.Date( ordData.getTime() ) } );
	}

	/** 
	 * Returns all rows from the ordini table that match the criteria 'ord_numero = :ordNumero'.
	 */
	public Ordini[] findWhereOrdNumeroEquals(String ordNumero) throws OrdiniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ord_numero = ? ORDER BY ord_numero", new Object[] { ordNumero } );
	}

	/** 
	 * Returns all rows from the ordini table that match the criteria 'ord_sped_data = :ordSpedData'.
	 */
	public Ordini[] findWhereOrdSpedDataEquals(Date ordSpedData) throws OrdiniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ord_sped_data = ? ORDER BY ord_sped_data", new Object[] { ordSpedData==null ? null : new java.sql.Date( ordSpedData.getTime() ) } );
	}

	/** 
	 * Returns all rows from the ordini table that match the criteria 'ord_spe_numero = :ordSpeNumero'.
	 */
	public Ordini[] findWhereOrdSpeNumeroEquals(String ordSpeNumero) throws OrdiniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ord_spe_numero = ? ORDER BY ord_spe_numero", new Object[] { ordSpeNumero } );
	}

	/** 
	 * Returns all rows from the ordini table that match the criteria 'ord_stato = :ordStato'.
	 */
	public Ordini[] findWhereOrdStatoEquals(String ordStato) throws OrdiniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ord_stato = ? ORDER BY ord_stato", new Object[] { ordStato } );
	}

	/** 
	 * Returns all rows from the ordini table that match the criteria 'anagrafica_ana_id = :anagraficaAnaId'.
	 */
	public Ordini[] findWhereAnagraficaAnaIdEquals(long anagraficaAnaId) throws OrdiniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE anagrafica_ana_id = ? ORDER BY anagrafica_ana_id", new Object[] {  new Long(anagraficaAnaId) } );
	}

	/** 
	 * Returns all rows from the ordini table that match the criteria 'corrieri_cor_id = :corrieriCorId'.
	 */
	public Ordini[] findWhereCorrieriCorIdEquals(long corrieriCorId) throws OrdiniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE corrieri_cor_id = ? ORDER BY corrieri_cor_id", new Object[] {  new Long(corrieriCorId) } );
	}

	/** 
	 * Returns all rows from the ordini table that match the criteria 'ord_consegnato = :ordConsegnato'.
	 */
	public Ordini[] findWhereOrdConsegnatoEquals(Date ordConsegnato) throws OrdiniDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ord_consegnato = ? ORDER BY ord_consegnato", new Object[] { ordConsegnato==null ? null : new java.sql.Date( ordConsegnato.getTime() ) } );
	}

	/**
	 * Method 'OrdiniDaoImpl'
	 * 
	 */
	public OrdiniDaoImpl()
	{
	}

	/**
	 * Method 'OrdiniDaoImpl'
	 * 
	 * @param userConn
	 */
	public OrdiniDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "ordini";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected Ordini fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			Ordini dto = new Ordini();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected Ordini[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Ordini dto = new Ordini();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		Ordini ret[] = new Ordini[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(Ordini dto, ResultSet rs) throws SQLException
	{
		dto.setOrdId( rs.getLong( COLUMN_ORD_ID ) );
		dto.setOrdData( rs.getDate(COLUMN_ORD_DATA ) );
		dto.setOrdNumero( rs.getString( COLUMN_ORD_NUMERO ) );
		dto.setOrdSpedData( rs.getDate(COLUMN_ORD_SPED_DATA ) );
		dto.setOrdSpeNumero( rs.getString( COLUMN_ORD_SPE_NUMERO ) );
		dto.setOrdStato( rs.getString( COLUMN_ORD_STATO ) );
		dto.setAnagraficaAnaId( rs.getLong( COLUMN_ANAGRAFICA_ANA_ID ) );
		dto.setCorrieriCorId( rs.getLong( COLUMN_CORRIERI_COR_ID ) );
		if (rs.wasNull()) {
			dto.setCorrieriCorIdNull( true );
		}
		
		dto.setOrdConsegnato( rs.getDate(COLUMN_ORD_CONSEGNATO ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(Ordini dto)
	{
	}

	/** 
	 * Returns all rows from the ordini table that match the specified arbitrary SQL statement
	 */
	public Ordini[] findByDynamicSelect(String sql, Object[] sqlParams) throws OrdiniDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new OrdiniDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the ordini table that match the specified arbitrary SQL statement
	 */
	public Ordini[] findByDynamicWhere(String sql, Object[] sqlParams) throws OrdiniDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new OrdiniDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}

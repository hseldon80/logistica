/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.inn.logistica.jdbc;

import com.inn.logistica.dao.*;
import com.inn.logistica.factory.*;
import java.util.Date;
import com.inn.logistica.dto.*;
import com.inn.logistica.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class UtenteDaoImpl extends AbstractDAO implements UtenteDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT ute_id, ute_nominativo, ute_email, ute_password, ute_cf_piva, ute_profilo, ute_stato, ute_last_login, ute_tentativi FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( ute_id, ute_nominativo, ute_email, ute_password, ute_cf_piva, ute_profilo, ute_stato, ute_last_login, ute_tentativi ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET ute_id = ?, ute_nominativo = ?, ute_email = ?, ute_password = ?, ute_cf_piva = ?, ute_profilo = ?, ute_stato = ?, ute_last_login = ?, ute_tentativi = ? WHERE ute_id = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE ute_id = ?";

	/** 
	 * Index of column ute_id
	 */
	protected static final int COLUMN_UTE_ID = 1;

	/** 
	 * Index of column ute_nominativo
	 */
	protected static final int COLUMN_UTE_NOMINATIVO = 2;

	/** 
	 * Index of column ute_email
	 */
	protected static final int COLUMN_UTE_EMAIL = 3;

	/** 
	 * Index of column ute_password
	 */
	protected static final int COLUMN_UTE_PASSWORD = 4;

	/** 
	 * Index of column ute_cf_piva
	 */
	protected static final int COLUMN_UTE_CF_PIVA = 5;

	/** 
	 * Index of column ute_profilo
	 */
	protected static final int COLUMN_UTE_PROFILO = 6;

	/** 
	 * Index of column ute_stato
	 */
	protected static final int COLUMN_UTE_STATO = 7;

	/** 
	 * Index of column ute_last_login
	 */
	protected static final int COLUMN_UTE_LAST_LOGIN = 8;

	/** 
	 * Index of column ute_tentativi
	 */
	protected static final int COLUMN_UTE_TENTATIVI = 9;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 9;

	/** 
	 * Index of primary-key column ute_id
	 */
	protected static final int PK_COLUMN_UTE_ID = 1;

	/** 
	 * Inserts a new row in the utente table.
	 */
	public UtentePk insert(Utente dto) throws UtenteDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( "SELECT nextval('seq_anagrafiche')" );
			rs = stmt.executeQuery();
			if (rs.next()) {
				dto.setUteId( rs.getLong( 1 ) );
				rs.close();
				stmt.close();
			}
		
			stmt = conn.prepareStatement( SQL_INSERT );
			int index = 1;
			stmt.setLong( index++, dto.getUteId() );
			stmt.setString( index++, dto.getUteNominativo() );
			stmt.setString( index++, dto.getUteEmail() );
			stmt.setString( index++, dto.getUtePassword() );
			stmt.setString( index++, dto.getUteCfPiva() );
			stmt.setString( index++, dto.getUteProfilo() );
			stmt.setString( index++, dto.getUteStato() );
			stmt.setDate(index++, dto.getUteLastLogin()==null ? null : new java.sql.Date( dto.getUteLastLogin().getTime() ) );
			if (dto.isUteTentativiNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getUteTentativi() );
			}
		
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new UtenteDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the utente table.
	 */
	public void update(UtentePk pk, Utente dto) throws UtenteDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setLong( index++, dto.getUteId() );
			stmt.setString( index++, dto.getUteNominativo() );
			stmt.setString( index++, dto.getUteEmail() );
			stmt.setString( index++, dto.getUtePassword() );
			stmt.setString( index++, dto.getUteCfPiva() );
			stmt.setString( index++, dto.getUteProfilo() );
			stmt.setString( index++, dto.getUteStato() );
			stmt.setDate(index++, dto.getUteLastLogin()==null ? null : new java.sql.Date( dto.getUteLastLogin().getTime() ) );
			if (dto.isUteTentativiNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getUteTentativi() );
			}
		
			stmt.setLong( 10, pk.getUteId() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new UtenteDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the utente table.
	 */
	public void delete(UtentePk pk) throws UtenteDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setLong( 1, pk.getUteId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new UtenteDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the utente table that matches the specified primary-key value.
	 */
	public Utente findByPrimaryKey(UtentePk pk) throws UtenteDaoException
	{
		return findByPrimaryKey( pk.getUteId() );
	}

	/** 
	 * Returns all rows from the utente table that match the criteria 'ute_id = :uteId'.
	 */
	public Utente findByPrimaryKey(long uteId) throws UtenteDaoException
	{
		Utente ret[] = findByDynamicSelect( SQL_SELECT + " WHERE ute_id = ?", new Object[] {  new Long(uteId) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the utente table that match the criteria ''.
	 */
	public Utente[] findAll() throws UtenteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY ute_id", null );
	}

	/** 
	 * Returns all rows from the utente table that match the criteria 'ute_id = :uteId'.
	 */
	public Utente[] findWhereUteIdEquals(long uteId) throws UtenteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ute_id = ? ORDER BY ute_id", new Object[] {  new Long(uteId) } );
	}

	/** 
	 * Returns all rows from the utente table that match the criteria 'ute_nominativo = :uteNominativo'.
	 */
	public Utente[] findWhereUteNominativoEquals(String uteNominativo) throws UtenteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ute_nominativo = ? ORDER BY ute_nominativo", new Object[] { uteNominativo } );
	}

	/** 
	 * Returns all rows from the utente table that match the criteria 'ute_email = :uteEmail'.
	 */
	public Utente[] findWhereUteEmailEquals(String uteEmail) throws UtenteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ute_email = ? ORDER BY ute_email", new Object[] { uteEmail } );
	}

	/** 
	 * Returns all rows from the utente table that match the criteria 'ute_password = :utePassword'.
	 */
	public Utente[] findWhereUtePasswordEquals(String utePassword) throws UtenteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ute_password = ? ORDER BY ute_password", new Object[] { utePassword } );
	}

	/** 
	 * Returns all rows from the utente table that match the criteria 'ute_cf_piva = :uteCfPiva'.
	 */
	public Utente[] findWhereUteCfPivaEquals(String uteCfPiva) throws UtenteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ute_cf_piva = ? ORDER BY ute_cf_piva", new Object[] { uteCfPiva } );
	}

	/** 
	 * Returns all rows from the utente table that match the criteria 'ute_profilo = :uteProfilo'.
	 */
	public Utente[] findWhereUteProfiloEquals(String uteProfilo) throws UtenteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ute_profilo = ? ORDER BY ute_profilo", new Object[] { uteProfilo } );
	}

	/** 
	 * Returns all rows from the utente table that match the criteria 'ute_stato = :uteStato'.
	 */
	public Utente[] findWhereUteStatoEquals(String uteStato) throws UtenteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ute_stato = ? ORDER BY ute_stato", new Object[] { uteStato } );
	}

	/** 
	 * Returns all rows from the utente table that match the criteria 'ute_last_login = :uteLastLogin'.
	 */
	public Utente[] findWhereUteLastLoginEquals(Date uteLastLogin) throws UtenteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ute_last_login = ? ORDER BY ute_last_login", new Object[] { uteLastLogin==null ? null : new java.sql.Date( uteLastLogin.getTime() ) } );
	}

	/** 
	 * Returns all rows from the utente table that match the criteria 'ute_tentativi = :uteTentativi'.
	 */
	public Utente[] findWhereUteTentativiEquals(int uteTentativi) throws UtenteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ute_tentativi = ? ORDER BY ute_tentativi", new Object[] {  new Integer(uteTentativi) } );
	}

	/**
	 * Method 'UtenteDaoImpl'
	 * 
	 */
	public UtenteDaoImpl()
	{
	}

	/**
	 * Method 'UtenteDaoImpl'
	 * 
	 * @param userConn
	 */
	public UtenteDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "utente";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected Utente fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			Utente dto = new Utente();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected Utente[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Utente dto = new Utente();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		Utente ret[] = new Utente[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(Utente dto, ResultSet rs) throws SQLException
	{
		dto.setUteId( rs.getLong( COLUMN_UTE_ID ) );
		dto.setUteNominativo( rs.getString( COLUMN_UTE_NOMINATIVO ) );
		dto.setUteEmail( rs.getString( COLUMN_UTE_EMAIL ) );
		dto.setUtePassword( rs.getString( COLUMN_UTE_PASSWORD ) );
		dto.setUteCfPiva( rs.getString( COLUMN_UTE_CF_PIVA ) );
		dto.setUteProfilo( rs.getString( COLUMN_UTE_PROFILO ) );
		dto.setUteStato( rs.getString( COLUMN_UTE_STATO ) );
		dto.setUteLastLogin( rs.getDate(COLUMN_UTE_LAST_LOGIN ) );
		dto.setUteTentativi( rs.getInt( COLUMN_UTE_TENTATIVI ) );
		if (rs.wasNull()) {
			dto.setUteTentativiNull( true );
		}
		
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(Utente dto)
	{
	}

	/** 
	 * Returns all rows from the utente table that match the specified arbitrary SQL statement
	 */
	public Utente[] findByDynamicSelect(String sql, Object[] sqlParams) throws UtenteDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new UtenteDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the utente table that match the specified arbitrary SQL statement
	 */
	public Utente[] findByDynamicWhere(String sql, Object[] sqlParams) throws UtenteDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new UtenteDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}

/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.inn.logistica.dao;

import java.util.Date;
import com.inn.logistica.dto.*;
import com.inn.logistica.exceptions.*;

public interface OrdiniDao
{
	/** 
	 * Inserts a new row in the ordini table.
	 */
	public OrdiniPk insert(Ordini dto) throws OrdiniDaoException;

	/** 
	 * Updates a single row in the ordini table.
	 */
	public void update(OrdiniPk pk, Ordini dto) throws OrdiniDaoException;

	/** 
	 * Deletes a single row in the ordini table.
	 */
	public void delete(OrdiniPk pk) throws OrdiniDaoException;

	/** 
	 * Returns the rows from the ordini table that matches the specified primary-key value.
	 */
	public Ordini findByPrimaryKey(OrdiniPk pk) throws OrdiniDaoException;

	/** 
	 * Returns all rows from the ordini table that match the criteria 'ord_id = :ordId'.
	 */
	public Ordini findByPrimaryKey(long ordId) throws OrdiniDaoException;

	/** 
	 * Returns all rows from the ordini table that match the criteria ''.
	 */
	public Ordini[] findAll() throws OrdiniDaoException;

	/** 
	 * Returns all rows from the ordini table that match the criteria 'anagrafica_ana_id = :anagraficaAnaId'.
	 */
	public Ordini[] findByAnagrafica(long anagraficaAnaId) throws OrdiniDaoException;

	/** 
	 * Returns all rows from the ordini table that match the criteria 'corrieri_cor_id = :corrieriCorId'.
	 */
	public Ordini[] findByCorrieri(long corrieriCorId) throws OrdiniDaoException;

	/** 
	 * Returns all rows from the ordini table that match the criteria 'ord_id = :ordId'.
	 */
	public Ordini[] findWhereOrdIdEquals(long ordId) throws OrdiniDaoException;

	/** 
	 * Returns all rows from the ordini table that match the criteria 'ord_data = :ordData'.
	 */
	public Ordini[] findWhereOrdDataEquals(Date ordData) throws OrdiniDaoException;

	/** 
	 * Returns all rows from the ordini table that match the criteria 'ord_numero = :ordNumero'.
	 */
	public Ordini[] findWhereOrdNumeroEquals(String ordNumero) throws OrdiniDaoException;

	/** 
	 * Returns all rows from the ordini table that match the criteria 'ord_sped_data = :ordSpedData'.
	 */
	public Ordini[] findWhereOrdSpedDataEquals(Date ordSpedData) throws OrdiniDaoException;

	/** 
	 * Returns all rows from the ordini table that match the criteria 'ord_spe_numero = :ordSpeNumero'.
	 */
	public Ordini[] findWhereOrdSpeNumeroEquals(String ordSpeNumero) throws OrdiniDaoException;

	/** 
	 * Returns all rows from the ordini table that match the criteria 'ord_stato = :ordStato'.
	 */
	public Ordini[] findWhereOrdStatoEquals(String ordStato) throws OrdiniDaoException;

	/** 
	 * Returns all rows from the ordini table that match the criteria 'anagrafica_ana_id = :anagraficaAnaId'.
	 */
	public Ordini[] findWhereAnagraficaAnaIdEquals(long anagraficaAnaId) throws OrdiniDaoException;

	/** 
	 * Returns all rows from the ordini table that match the criteria 'corrieri_cor_id = :corrieriCorId'.
	 */
	public Ordini[] findWhereCorrieriCorIdEquals(long corrieriCorId) throws OrdiniDaoException;

	/** 
	 * Returns all rows from the ordini table that match the criteria 'ord_consegnato = :ordConsegnato'.
	 */
	public Ordini[] findWhereOrdConsegnatoEquals(Date ordConsegnato) throws OrdiniDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the ordini table that match the specified arbitrary SQL statement
	 */
	public Ordini[] findByDynamicSelect(String sql, Object[] sqlParams) throws OrdiniDaoException;

	/** 
	 * Returns all rows from the ordini table that match the specified arbitrary SQL statement
	 */
	public Ordini[] findByDynamicWhere(String sql, Object[] sqlParams) throws OrdiniDaoException;

}

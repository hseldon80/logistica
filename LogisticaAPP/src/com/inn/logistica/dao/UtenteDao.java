/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.inn.logistica.dao;

import java.util.Date;
import com.inn.logistica.dto.*;
import com.inn.logistica.exceptions.*;

public interface UtenteDao
{
	/** 
	 * Inserts a new row in the utente table.
	 */
	public UtentePk insert(Utente dto) throws UtenteDaoException;

	/** 
	 * Updates a single row in the utente table.
	 */
	public void update(UtentePk pk, Utente dto) throws UtenteDaoException;

	/** 
	 * Deletes a single row in the utente table.
	 */
	public void delete(UtentePk pk) throws UtenteDaoException;

	/** 
	 * Returns the rows from the utente table that matches the specified primary-key value.
	 */
	public Utente findByPrimaryKey(UtentePk pk) throws UtenteDaoException;

	/** 
	 * Returns all rows from the utente table that match the criteria 'ute_id = :uteId'.
	 */
	public Utente findByPrimaryKey(long uteId) throws UtenteDaoException;

	/** 
	 * Returns all rows from the utente table that match the criteria ''.
	 */
	public Utente[] findAll() throws UtenteDaoException;

	/** 
	 * Returns all rows from the utente table that match the criteria 'ute_id = :uteId'.
	 */
	public Utente[] findWhereUteIdEquals(long uteId) throws UtenteDaoException;

	/** 
	 * Returns all rows from the utente table that match the criteria 'ute_nominativo = :uteNominativo'.
	 */
	public Utente[] findWhereUteNominativoEquals(String uteNominativo) throws UtenteDaoException;

	/** 
	 * Returns all rows from the utente table that match the criteria 'ute_email = :uteEmail'.
	 */
	public Utente[] findWhereUteEmailEquals(String uteEmail) throws UtenteDaoException;

	/** 
	 * Returns all rows from the utente table that match the criteria 'ute_password = :utePassword'.
	 */
	public Utente[] findWhereUtePasswordEquals(String utePassword) throws UtenteDaoException;

	/** 
	 * Returns all rows from the utente table that match the criteria 'ute_cf_piva = :uteCfPiva'.
	 */
	public Utente[] findWhereUteCfPivaEquals(String uteCfPiva) throws UtenteDaoException;

	/** 
	 * Returns all rows from the utente table that match the criteria 'ute_profilo = :uteProfilo'.
	 */
	public Utente[] findWhereUteProfiloEquals(String uteProfilo) throws UtenteDaoException;

	/** 
	 * Returns all rows from the utente table that match the criteria 'ute_stato = :uteStato'.
	 */
	public Utente[] findWhereUteStatoEquals(String uteStato) throws UtenteDaoException;

	/** 
	 * Returns all rows from the utente table that match the criteria 'ute_last_login = :uteLastLogin'.
	 */
	public Utente[] findWhereUteLastLoginEquals(Date uteLastLogin) throws UtenteDaoException;

	/** 
	 * Returns all rows from the utente table that match the criteria 'ute_tentativi = :uteTentativi'.
	 */
	public Utente[] findWhereUteTentativiEquals(int uteTentativi) throws UtenteDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the utente table that match the specified arbitrary SQL statement
	 */
	public Utente[] findByDynamicSelect(String sql, Object[] sqlParams) throws UtenteDaoException;

	/** 
	 * Returns all rows from the utente table that match the specified arbitrary SQL statement
	 */
	public Utente[] findByDynamicWhere(String sql, Object[] sqlParams) throws UtenteDaoException;

}

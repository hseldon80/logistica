/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.inn.logistica.jdbc;

import com.inn.logistica.dao.*;
import com.inn.logistica.factory.*;
import com.inn.logistica.dto.*;
import com.inn.logistica.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class OrdiniArticoliDaoImpl extends AbstractDAO implements OrdiniArticoliDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT ode_id, ode_qta, ordini_ord_id, articolo_art_id FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( ode_id, ode_qta, ordini_ord_id, articolo_art_id ) VALUES ( ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET ode_id = ?, ode_qta = ?, ordini_ord_id = ?, articolo_art_id = ? WHERE ode_id = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE ode_id = ?";

	/** 
	 * Index of column ode_id
	 */
	protected static final int COLUMN_ODE_ID = 1;

	/** 
	 * Index of column ode_qta
	 */
	protected static final int COLUMN_ODE_QTA = 2;

	/** 
	 * Index of column ordini_ord_id
	 */
	protected static final int COLUMN_ORDINI_ORD_ID = 3;

	/** 
	 * Index of column articolo_art_id
	 */
	protected static final int COLUMN_ARTICOLO_ART_ID = 4;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 4;

	/** 
	 * Index of primary-key column ode_id
	 */
	protected static final int PK_COLUMN_ODE_ID = 1;

	/** 
	 * Inserts a new row in the ordini_articoli table.
	 */
	public OrdiniArticoliPk insert(OrdiniArticoli dto) throws OrdiniArticoliDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( "SELECT nextval('seq_ordini')" );
			rs = stmt.executeQuery();
			if (rs.next()) {
				dto.setOdeId( rs.getLong( 1 ) );
				rs.close();
				stmt.close();
			}
		
			stmt = conn.prepareStatement( SQL_INSERT );
			int index = 1;
			stmt.setLong( index++, dto.getOdeId() );
			stmt.setInt( index++, dto.getOdeQta() );
			stmt.setLong( index++, dto.getOrdiniOrdId() );
			stmt.setLong( index++, dto.getArticoloArtId() );
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new OrdiniArticoliDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the ordini_articoli table.
	 */
	public void update(OrdiniArticoliPk pk, OrdiniArticoli dto) throws OrdiniArticoliDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setLong( index++, dto.getOdeId() );
			stmt.setInt( index++, dto.getOdeQta() );
			stmt.setLong( index++, dto.getOrdiniOrdId() );
			stmt.setLong( index++, dto.getArticoloArtId() );
			stmt.setLong( 5, pk.getOdeId() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new OrdiniArticoliDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the ordini_articoli table.
	 */
	public void delete(OrdiniArticoliPk pk) throws OrdiniArticoliDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setLong( 1, pk.getOdeId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new OrdiniArticoliDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the ordini_articoli table that matches the specified primary-key value.
	 */
	public OrdiniArticoli findByPrimaryKey(OrdiniArticoliPk pk) throws OrdiniArticoliDaoException
	{
		return findByPrimaryKey( pk.getOdeId() );
	}

	/** 
	 * Returns all rows from the ordini_articoli table that match the criteria 'ode_id = :odeId'.
	 */
	public OrdiniArticoli findByPrimaryKey(long odeId) throws OrdiniArticoliDaoException
	{
		OrdiniArticoli ret[] = findByDynamicSelect( SQL_SELECT + " WHERE ode_id = ?", new Object[] {  new Long(odeId) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the ordini_articoli table that match the criteria ''.
	 */
	public OrdiniArticoli[] findAll() throws OrdiniArticoliDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY ode_id", null );
	}

	/** 
	 * Returns all rows from the ordini_articoli table that match the criteria 'articolo_art_id = :articoloArtId'.
	 */
	public OrdiniArticoli[] findByArticolo(long articoloArtId) throws OrdiniArticoliDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE articolo_art_id = ?", new Object[] {  new Long(articoloArtId) } );
	}

	/** 
	 * Returns all rows from the ordini_articoli table that match the criteria 'ordini_ord_id = :ordiniOrdId'.
	 */
	public OrdiniArticoli[] findByOrdini(long ordiniOrdId) throws OrdiniArticoliDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ordini_ord_id = ?", new Object[] {  new Long(ordiniOrdId) } );
	}

	/** 
	 * Returns all rows from the ordini_articoli table that match the criteria 'ode_id = :odeId'.
	 */
	public OrdiniArticoli[] findWhereOdeIdEquals(long odeId) throws OrdiniArticoliDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ode_id = ? ORDER BY ode_id", new Object[] {  new Long(odeId) } );
	}

	/** 
	 * Returns all rows from the ordini_articoli table that match the criteria 'ode_qta = :odeQta'.
	 */
	public OrdiniArticoli[] findWhereOdeQtaEquals(int odeQta) throws OrdiniArticoliDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ode_qta = ? ORDER BY ode_qta", new Object[] {  new Integer(odeQta) } );
	}

	/** 
	 * Returns all rows from the ordini_articoli table that match the criteria 'ordini_ord_id = :ordiniOrdId'.
	 */
	public OrdiniArticoli[] findWhereOrdiniOrdIdEquals(long ordiniOrdId) throws OrdiniArticoliDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ordini_ord_id = ? ORDER BY ordini_ord_id", new Object[] {  new Long(ordiniOrdId) } );
	}

	/** 
	 * Returns all rows from the ordini_articoli table that match the criteria 'articolo_art_id = :articoloArtId'.
	 */
	public OrdiniArticoli[] findWhereArticoloArtIdEquals(long articoloArtId) throws OrdiniArticoliDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE articolo_art_id = ? ORDER BY articolo_art_id", new Object[] {  new Long(articoloArtId) } );
	}

	/**
	 * Method 'OrdiniArticoliDaoImpl'
	 * 
	 */
	public OrdiniArticoliDaoImpl()
	{
	}

	/**
	 * Method 'OrdiniArticoliDaoImpl'
	 * 
	 * @param userConn
	 */
	public OrdiniArticoliDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "ordini_articoli";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected OrdiniArticoli fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			OrdiniArticoli dto = new OrdiniArticoli();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected OrdiniArticoli[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			OrdiniArticoli dto = new OrdiniArticoli();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		OrdiniArticoli ret[] = new OrdiniArticoli[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(OrdiniArticoli dto, ResultSet rs) throws SQLException
	{
		dto.setOdeId( rs.getLong( COLUMN_ODE_ID ) );
		dto.setOdeQta( rs.getInt( COLUMN_ODE_QTA ) );
		dto.setOrdiniOrdId( rs.getLong( COLUMN_ORDINI_ORD_ID ) );
		dto.setArticoloArtId( rs.getLong( COLUMN_ARTICOLO_ART_ID ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(OrdiniArticoli dto)
	{
	}

	/** 
	 * Returns all rows from the ordini_articoli table that match the specified arbitrary SQL statement
	 */
	public OrdiniArticoli[] findByDynamicSelect(String sql, Object[] sqlParams) throws OrdiniArticoliDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new OrdiniArticoliDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the ordini_articoli table that match the specified arbitrary SQL statement
	 */
	public OrdiniArticoli[] findByDynamicWhere(String sql, Object[] sqlParams) throws OrdiniArticoliDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new OrdiniArticoliDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}

/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.inn.logistica.dao;

import java.util.Date;
import com.inn.logistica.dto.*;
import com.inn.logistica.exceptions.*;

public interface MovimentazioniDao
{
	/** 
	 * Inserts a new row in the movimentazioni table.
	 */
	public MovimentazioniPk insert(Movimentazioni dto) throws MovimentazioniDaoException;

	/** 
	 * Updates a single row in the movimentazioni table.
	 */
	public void update(MovimentazioniPk pk, Movimentazioni dto) throws MovimentazioniDaoException;

	/** 
	 * Deletes a single row in the movimentazioni table.
	 */
	public void delete(MovimentazioniPk pk) throws MovimentazioniDaoException;

	/** 
	 * Returns the rows from the movimentazioni table that matches the specified primary-key value.
	 */
	public Movimentazioni findByPrimaryKey(MovimentazioniPk pk) throws MovimentazioniDaoException;

	/** 
	 * Returns all rows from the movimentazioni table that match the criteria 'mov_id = :movId'.
	 */
	public Movimentazioni findByPrimaryKey(long movId) throws MovimentazioniDaoException;

	/** 
	 * Returns all rows from the movimentazioni table that match the criteria ''.
	 */
	public Movimentazioni[] findAll() throws MovimentazioniDaoException;

	/** 
	 * Returns all rows from the movimentazioni table that match the criteria 'anagrafica_ana_id = :anagraficaAnaId'.
	 */
	public Movimentazioni[] findByAnagrafica(long anagraficaAnaId) throws MovimentazioniDaoException;

	/** 
	 * Returns all rows from the movimentazioni table that match the criteria 'mov_id = :movId'.
	 */
	public Movimentazioni[] findWhereMovIdEquals(long movId) throws MovimentazioniDaoException;

	/** 
	 * Returns all rows from the movimentazioni table that match the criteria 'mov_data = :movData'.
	 */
	public Movimentazioni[] findWhereMovDataEquals(Date movData) throws MovimentazioniDaoException;

	/** 
	 * Returns all rows from the movimentazioni table that match the criteria 'mov_ora = :movOra'.
	 */
	public Movimentazioni[] findWhereMovOraEquals(String movOra) throws MovimentazioniDaoException;

	/** 
	 * Returns all rows from the movimentazioni table that match the criteria 'mov_tipo = :movTipo'.
	 */
	public Movimentazioni[] findWhereMovTipoEquals(String movTipo) throws MovimentazioniDaoException;

	/** 
	 * Returns all rows from the movimentazioni table that match the criteria 'anagrafica_ana_id = :anagraficaAnaId'.
	 */
	public Movimentazioni[] findWhereAnagraficaAnaIdEquals(long anagraficaAnaId) throws MovimentazioniDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the movimentazioni table that match the specified arbitrary SQL statement
	 */
	public Movimentazioni[] findByDynamicSelect(String sql, Object[] sqlParams) throws MovimentazioniDaoException;

	/** 
	 * Returns all rows from the movimentazioni table that match the specified arbitrary SQL statement
	 */
	public Movimentazioni[] findByDynamicWhere(String sql, Object[] sqlParams) throws MovimentazioniDaoException;

}
